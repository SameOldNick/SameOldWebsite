import React from 'react';
import { FormikProps } from 'formik';
import { Badge, Button, Card, CardBody, Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Row } from 'reactstrap';
import withReactContent from 'sweetalert2-react-content';
import { FaExternalLinkAlt, FaInfoCircle, FaUndo } from 'react-icons/fa';
import { Tag } from 'react-tag-autocomplete';

import { DateTime } from 'luxon';
import axios from 'axios';
import Swal from 'sweetalert2';
import S from 'string';

import FormWrapper, { IArticleFormValues } from './FormWrapper';
import SelectMainImage, { TMainImage } from './article-form/main-image';
import Tags from './article-form/Tags';
import Content from './article-form/Content';
import SelectRevisionModal from './article-form/SelectRevisionModal';

import UnsavedChangesWarning from '@admin/components/UnsavedChangesWarning';
import Heading, { HeadingTitle } from '@admin/layouts/admin/Heading';
import WaitToLoad from '@admin/components/WaitToLoad';
import Loader from '@admin/components/Loader';
import { IHasRouter } from '@admin/components/hoc/WithRouter';
import SelectDateTimeModal from '@admin/components/SelectDateTimeModal';
import ArticleInfoModal from './ArticleInfoModal';

import { defaultFormatter } from '@admin/utils/response-formatter/factories';
import { createAuthRequest } from '@admin/utils/api/factories';

import Revision from '@admin/utils/api/models/Revision';
import Article from '@admin/utils/api/models/Article';

export interface IEditArticleFormValues extends IArticleFormValues {

}

export interface IArticleValues {
    title: string;
    slug: string;
    content: string;
    summary: string | null;
    parentRevision?: Revision;
}

interface IProps extends IHasRouter<'article'> {
    article: Article;
    revision: Revision;
    tags: Tag[];
    mainImage: TMainImage | undefined;

    setTags: (tags: Tag[]) => void;
    setMainImage: (image: TMainImage | undefined) => void;

    onSaveAsRevision: (values: IArticleValues) => Promise<void>;
    onUpdate: (values: IArticleValues) => Promise<void>;
    onPublish: (values: IArticleValues, dateTime: DateTime) => Promise<void>;
    onUnpublish: (values: IArticleValues) => Promise<void>;
    onUnschedule: (values: IArticleValues) => Promise<void>;
    onDelete: (values: IArticleValues) => Promise<void>;
}

const EditForm = React.forwardRef<FormikProps<IEditArticleFormValues>, IProps>((props, ref) => {
    const {
        router,
        article,
        revision,
        tags,
        mainImage,
        setTags,
        setMainImage,
        onUpdate,
        onSaveAsRevision,
        onPublish,
        onUnpublish,
        onUnschedule,
        onDelete
    } = props;

    const formikRef = React.useRef<FormikProps<IEditArticleFormValues> | null>();
    const waitToLoadRevisionsRef = React.createRef<WaitToLoad<IRevision[]>>();

    const [, setRenderCount] = React.useState(0);
    const [showSelectRevisionModal, setShowSelectRevisionModal] = React.useState(false);
    const [showScheduleModal, setShowScheduleModal] = React.useState(false);
    const [buttonDropdownOpen, setButtonDropdownOpen] = React.useState(false);
    const [showArticleInfoModal, setShowArticleInfoModal] = React.useState(false);
    const [dirty, setDirty] = React.useState({
        mainImage: false,
        tags: false
    });

    React.useEffect(() => {
        setRenderCount((count) => count + 1);
    }, [router.location.pathname, router.params]);

    const initialValues =
        React.useMemo(
            () => ({
                title: article.article.title,
                content: revision.revision.content,
                summary: revision.revision.summary,
                summary_auto_generate: revision.revision.summary_auto,
                slug: article.article.slug,
                slug_auto_generate: article.isSlugAutoGenerated
            }),
            [article, revision]
        );

    const handleSaveAsRevisionClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onSaveAsRevision({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        });
    }

    const handleUpdateClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onUpdate({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        });
    }

    const handlePublishClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onPublish({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        }, DateTime.now());
    }

    const handleUnpublishClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onUnpublish({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        });
    }

    const handleScheduleClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        setShowScheduleModal(true);
    }

    const handleScheduleDateTimeSelected = (selected: DateTime) => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onPublish({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        }, selected);

        setShowScheduleModal(false);
    }

    const handleUnscheduleClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onUnschedule({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        });
    }

    const handleDeleteClicked = async () => {
        if (!formikRef.current) {
            console.error('No reference to formik.');
            return;
        }

        const { values: { content, summary_auto_generate, summary, title, slug } } = formikRef.current;

        onDelete({
            title,
            slug,
            content,
            summary: !summary_auto_generate ? summary : null,
            parentRevision: revision
        });
    }

    const handleRevisionsClicked = () => setShowSelectRevisionModal(true);

    const handleRevisionSelected = (revision: IRevision) => {
        if (!article.article.id || !revision.uuid) {
            console.error('Article ID or revision UUID is missing.', article, revision);

            return;
        }

        router.navigate(article.generatePath(revision.uuid));

        formikRef.current?.resetForm();
    }

    const handleArticleInfoClicked = () => setShowArticleInfoModal(true);

    const handleCloseArticleInfoModal = () => setShowArticleInfoModal(false);

    const loadRevisions = async () => {
        const response = await createAuthRequest().get<IRevision[]>(`blog/articles/${article.article.id}/revisions`);

        return response.data;
    }

    const handleLoadRevisionsError = async (err: unknown) => {
        const message = defaultFormatter().parse(axios.isAxiosError(err) ? err.response : undefined);

        const result = await withReactContent(Swal).fire({
            icon: 'error',
            title: 'Oops...',
            text: `An error occurred loading revisions: ${message}`,
            confirmButtonText: 'Try Again',
            showConfirmButton: true,
            showCancelButton: true
        });

        if (result.isConfirmed) {
            waitToLoadRevisionsRef.current?.load();
        } else {
            router.navigate(-1);
        }
    }

    const handleMainImageChanged = (image?: TMainImage) => {
        setMainImage(image);
        setDirty((prev) => ({ ...prev, mainImage: true }))
    }

    const handleTagsChanged = (tags: Tag[]) => {
        setTags(tags);
        setDirty((prev) => ({ ...prev, tags: true }))
    }

    const hasUnsavedChanges = () => dirty.mainImage || dirty.tags || formikRef.current?.dirty ? true : false;

    return (
        <>
            {showSelectRevisionModal && (
                <WaitToLoad<IRevision[]>
                    ref={waitToLoadRevisionsRef}
                    loading={<Loader display={{ type: 'over-element' }} />}
                    callback={loadRevisions}
                >
                    {(revisions, err) => (
                        <>
                            {err && handleLoadRevisionsError(err)}
                            {revisions && (
                                <SelectRevisionModal
                                    existing={revision}
                                    revisions={revisions}
                                    onSelected={handleRevisionSelected}
                                    onCancelled={() => setShowSelectRevisionModal(false)}
                                />
                            )}

                        </>
                    )}
                </WaitToLoad>
            )}

            {showScheduleModal && (
                <SelectDateTimeModal
                    onSelected={handleScheduleDateTimeSelected}
                    onCancelled={() => setShowScheduleModal(false)}
                />
            )}

            {showArticleInfoModal && (
                <ArticleInfoModal
                    article={article}
                    onClosed={handleCloseArticleInfoModal}
                />
            )}

            <FormWrapper
                ref={(instance) => formikRef.current = React.assignRef(ref, instance)}
                enableReinitialize
                initialValues={initialValues}
                onSubmit={() => console.error('Form submit is not implemented.')}
                {...props}
            >
                {(formikProps) => (
                    <>
                        <UnsavedChangesWarning enabled={hasUnsavedChanges()} />

                        <Heading>
                            <HeadingTitle>
                                Edit Post
                                {hasUnsavedChanges() && (
                                    <small className='ms-1 text-body-secondary'>
                                        <Badge color='secondary'>Unsaved Changes</Badge>
                                    </small>
                                )}
                            </HeadingTitle>

                            <div className='d-flex'>
                                <Button
                                    color="primary"
                                    outline
                                    className='me-1'
                                    title='Article Information'
                                    onClick={handleArticleInfoClicked}
                                >
                                    <FaInfoCircle />
                                </Button>

                                <Button
                                    color="primary"
                                    outline
                                    className='me-1'
                                    title='Restore Revision'
                                    onClick={handleRevisionsClicked}
                                >
                                    <FaUndo />
                                </Button>

                                <Button
                                    tag='a'
                                    color='primary'
                                    outline
                                    className='me-1'
                                    title='Preview Article'
                                    href={article.article.private_url}
                                    target='_blank'
                                >
                                    <FaExternalLinkAlt />
                                </Button>

                                <Dropdown toggle={() => setButtonDropdownOpen((prev) => !prev)} isOpen={buttonDropdownOpen}>
                                    <DropdownToggle caret color='primary'>
                                        {`Status: ${S(article.status).capitalize().s}`}
                                    </DropdownToggle>
                                    <DropdownMenu>
                                        {article.status === Article.ARTICLE_STATUS_PUBLISHED && (
                                            <>
                                                <DropdownItem onClick={handleSaveAsRevisionClicked}>Save as Revision</DropdownItem>
                                                <DropdownItem onClick={handleUpdateClicked}>Update</DropdownItem>
                                                <DropdownItem divider />
                                                <DropdownItem onClick={handleUnpublishClicked}>Unpublish</DropdownItem>
                                                <DropdownItem onClick={handleScheduleClicked}>Schedule</DropdownItem>
                                                <DropdownItem onClick={handleDeleteClicked}>Delete</DropdownItem>
                                            </>
                                        )}
                                        {article.status === Article.ARTICLE_STATUS_UNPUBLISHED && (
                                            <>
                                                <DropdownItem onClick={handleSaveAsRevisionClicked}>Save as Revision</DropdownItem>
                                                <DropdownItem onClick={handlePublishClicked}>Save &amp; Publish</DropdownItem>
                                                <DropdownItem onClick={handleScheduleClicked}>Schedule</DropdownItem>
                                                <DropdownItem divider />
                                                <DropdownItem onClick={handleDeleteClicked}>Delete</DropdownItem>
                                            </>
                                        )}
                                        {article.status === Article.ARTICLE_STATUS_SCHEDULED && (
                                            <>
                                                <DropdownItem onClick={handleSaveAsRevisionClicked}>Save as Revision</DropdownItem>
                                                <DropdownItem onClick={handleUpdateClicked}>Update</DropdownItem>
                                                <DropdownItem onClick={handlePublishClicked}>Publish Immediately</DropdownItem>
                                                <DropdownItem onClick={handleScheduleClicked}>Reschedule</DropdownItem>
                                                <DropdownItem divider />
                                                <DropdownItem onClick={handleUnscheduleClicked}>Unschedule</DropdownItem>
                                                <DropdownItem onClick={handleDeleteClicked}>Delete</DropdownItem>
                                            </>
                                        )}
                                    </DropdownMenu>
                                </Dropdown>
                            </div>
                        </Heading>

                        <Row>
                            <Col md={8}>
                                <Card>
                                    <CardBody>
                                        <Content formikProps={formikProps} />
                                    </CardBody>
                                </Card>
                            </Col>

                            <Col md={4}>
                                <SelectMainImage className='mb-3' current={mainImage} onChange={handleMainImageChanged} />

                                <Tags tags={tags} onTagsChanged={handleTagsChanged} />
                            </Col>
                        </Row>
                    </>
                )}
            </FormWrapper>
        </>
    );
});

EditForm.displayName = 'EditForm';

export default EditForm;
