import { DateTime } from "luxon";
import S from "string";
import { generatePath } from "react-router-dom";

import Revision from "./Revision";

export type TArticleStatusRevision = 'revision';
export type TArticleStatusPublished = 'published';
export type TArticleStatusScheduled = 'scheduled';
export type TArticleStatusDeleted = 'deleted';

export type TArticleStatus = TArticleStatusRevision | TArticleStatusPublished | TArticleStatusScheduled | TArticleStatusDeleted;

export default class Article {
    public static readonly ARTICLE_STATUS_UNPUBLISHED = 'revision';
    public static readonly ARTICLE_STATUS_PUBLISHED = 'published';
    public static readonly ARTICLE_STATUS_SCHEDULED = 'scheduled';
    public static readonly ARTICLE_STATUS_DELETED = 'deleted';

    public readonly currentRevision: Revision | null;

    constructor(
        public readonly article: IArticle
    ) {
        this.currentRevision = this.article.current_revision !== null ? new Revision(this.article.current_revision) : null;
    }

    public get isNew() {
        return this.article.id === undefined;
    }

    public get isExisting() {
        return this.article.id !== undefined;
    }

    public get createdAt() {
        return this.currentRevision ? this.currentRevision.createdAt : null;
    }

    public get publishedAt() {
        return this.article.published_at !== null ? DateTime.fromISO(this.article.published_at) : null;
    }

    public get deletedAt() {
        return this.article.deleted_at !== null ? DateTime.fromISO(this.article.deleted_at) : null;
    }

    public get status(): TArticleStatus {
        if (this.deletedAt === null) {
            if (this.publishedAt === null)
                return Article.ARTICLE_STATUS_UNPUBLISHED;
            else if (this.publishedAt.diffNow().toMillis() < 0)
                return Article.ARTICLE_STATUS_PUBLISHED;
            else
                return Article.ARTICLE_STATUS_SCHEDULED;
        } else {
            return Article.ARTICLE_STATUS_DELETED;
        }

    }

    public get isSlugAutoGenerated() {
        return Article.generateSlugFromTitle(this.article.title) === this.article.slug;
    }

    public generatePath(revision?: string) {
        if (!this.article.id)
            throw new Error('Article is missing ID.');

        if (revision)
            return generatePath(`/admin/posts/edit/:article/revisions/:revision`, {
                article: this.article.id.toString(),
                revision: revision
            });
        else
            return generatePath(`/admin/posts/edit/:article`, {
                article: this.article.id.toString()
            });
    }

    public static generateSlugFromTitle(title: string) {
        return S(title).slugify().s;
    }
}
